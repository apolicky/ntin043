mod ACCOUNT is 

pr NAT .
pr INT .
pr STRING .
inc CONFIGURATION .

op Account : -> Cid [ctor] .
op balance :_ : Nat -> Attribute [ctor gather (&)] .
op transfer : Oid Oid Int -> Msg .
ops in out : Object Nat -> Object [ctor] .


op enough-money : Object Nat -> Bool .
op balance : Object -> Nat .

vars FROM TO : Oid .
var N1 N2 Amount : Nat .
ops SA NA1 NA2 NA3 : -> Object [ctor] .
ops SAId AId1 AId2 AId3 : -> Oid .

vars O1 O2 : Object .

eq NA1 = < AId1 : Account | balance : 100000 > .
eq NA2 = < AId2 : Account | balance : 4000 > .
eq NA3 = < AId3 : Account | balance : 42 > .
eq SA = < SAId : Account | balance : 150000000 > .

 
eq enough-money(< FROM : Account | balance : N1 >, Amount) =  N1 >= Amount .

crl [transfer] :
    transfer(FROM, TO, Amount) 
    < FROM : Account | balance : N1 >
    < TO : Account | balance : N2 >
    => 
    < FROM : Account | balance : N1 - Amount >
    < TO : Account | balance : N2 + Amount > 
    if N1 > Amount . 


eq in(< FROM : Account | balance : N1 >, Amount) = 
    < FROM : Account | balance : N1 + Amount > .

eq out(< FROM : Account | balance : N1 >, Amount) = 
    < FROM : Account | balance : N1 - Amount > .


eq balance(< FROM : Account | balance : N1 >) = N1 .

endm






